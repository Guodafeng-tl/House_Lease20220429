<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
		
	 <context:component-scan base-package="com.dafeng">
        <!-- 除了控制器 其他全部扫描 -->
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan> 	
	<!-- Spring配置文件 这里主要配置和业务逻辑有关的 -->  
    <!-- 数据源 事务配置  xxx -->  
    <context:property-placeholder location="classpath:dbconfig.properties"/>
    
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
     	<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
     	<property name="driverClass" value="${jdbc.driverClass}"></property>
     	<property name="user" value="${jdbc.user}"></property>
     	<property name="password" value="${jdbc.password}"></property>
    </bean> 
    
    <!-- 配置MyBatis的整合 -->
     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
     	<!-- 指定MyBatis全局配置文件 -->
     	<property name="configLocation" value="classpath:mybatis-config.xml"></property>
     	<property name="dataSource" ref="pooledDataSource"></property>
     	<!-- MyBatis.mapper 文件的位置-->
     	<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
     </bean>
     <!-- 配置扫描器 将MyBatis接口的实现加入到IOC容器中 -->
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
     	<!-- 扫描所有Dao接口的实现，加入到IOC容器 -->
     	<property name="basePackage" value="com.dafeng.dao"></property>
     </bean>
     
     <!-- 配置一个可以执行批量的SqlSession -->
     <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
     	<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
     	<constructor-arg name="executorType" value="BATCH"></constructor-arg>
     </bean>
     
     
     <!-- 事务控制配置 -->
     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
     	<!-- 控制事务源 -->
     	<property name="dataSource" ref="pooledDataSource"></property>
     </bean>
     
     <!-- 开启基于注解的事务 使用xml配置形式的事务 （必要主要的都是使用配置式） -->
     <aop:config>
     	 <!-- 切入点表达式   代表这些方法可能切入事务-->
     	 <aop:pointcut expression="execution(* com.dafeng.service..*(..))" id="txPoint"/>
     	 <!-- 配置事务增强 -->
     	 <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
     </aop:config>
     
     <!-- 配置事务如何增强  也就是事务如何切入 -->
     <tx:advice id="txAdvice" transaction-manager="transactionManager">
     	<tx:attributes>
     		<!-- *代表所有方法都是事务方法 事务切入之后-->
     		<tx:method name="*"/>
     		<!-- 以get开始的所有方法  都是只读的-->
     		<tx:method name="get*" read-only="true"/>
     		
     	</tx:attributes>
     </tx:advice>
     
     <!-- Spring配置的核心点  1. 数据源  2.与MyBatis的数据整合  3.事务控制  -->
     
		
</beans>